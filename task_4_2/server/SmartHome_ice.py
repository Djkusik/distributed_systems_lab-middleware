# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'DeviceException' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceException = Ice.createTempClass()
    class DeviceException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceException'

    _M_SmartHome._t_DeviceException = IcePy.defineException('::SmartHome::DeviceException', DeviceException, (), False, None, ())
    DeviceException._ice_type = _M_SmartHome._t_DeviceException

    _M_SmartHome.DeviceException = DeviceException
    del DeviceException

if 'DeviceIsOffException' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceIsOffException = Ice.createTempClass()
    class DeviceIsOffException(_M_SmartHome.DeviceException):
        def __init__(self):
            _M_SmartHome.DeviceException.__init__(self)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceIsOffException'

    _M_SmartHome._t_DeviceIsOffException = IcePy.defineException('::SmartHome::DeviceIsOffException', DeviceIsOffException, (), False, _M_SmartHome._t_DeviceException, ())
    DeviceIsOffException._ice_type = _M_SmartHome._t_DeviceIsOffException

    _M_SmartHome.DeviceIsOffException = DeviceIsOffException
    del DeviceIsOffException

if 'AlreadyTurnedOnException' not in _M_SmartHome.__dict__:
    _M_SmartHome.AlreadyTurnedOnException = Ice.createTempClass()
    class AlreadyTurnedOnException(_M_SmartHome.DeviceException):
        def __init__(self):
            _M_SmartHome.DeviceException.__init__(self)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::AlreadyTurnedOnException'

    _M_SmartHome._t_AlreadyTurnedOnException = IcePy.defineException('::SmartHome::AlreadyTurnedOnException', AlreadyTurnedOnException, (), False, _M_SmartHome._t_DeviceException, ())
    AlreadyTurnedOnException._ice_type = _M_SmartHome._t_AlreadyTurnedOnException

    _M_SmartHome.AlreadyTurnedOnException = AlreadyTurnedOnException
    del AlreadyTurnedOnException

if 'AlreadyTurnedOffException' not in _M_SmartHome.__dict__:
    _M_SmartHome.AlreadyTurnedOffException = Ice.createTempClass()
    class AlreadyTurnedOffException(_M_SmartHome.DeviceException):
        def __init__(self):
            _M_SmartHome.DeviceException.__init__(self)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::AlreadyTurnedOffException'

    _M_SmartHome._t_AlreadyTurnedOffException = IcePy.defineException('::SmartHome::AlreadyTurnedOffException', AlreadyTurnedOffException, (), False, _M_SmartHome._t_DeviceException, ())
    AlreadyTurnedOffException._ice_type = _M_SmartHome._t_AlreadyTurnedOffException

    _M_SmartHome.AlreadyTurnedOffException = AlreadyTurnedOffException
    del AlreadyTurnedOffException

if 'LackOfDataException' not in _M_SmartHome.__dict__:
    _M_SmartHome.LackOfDataException = Ice.createTempClass()
    class LackOfDataException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::LackOfDataException'

    _M_SmartHome._t_LackOfDataException = IcePy.defineException('::SmartHome::LackOfDataException', LackOfDataException, (), False, None, ())
    LackOfDataException._ice_type = _M_SmartHome._t_LackOfDataException

    _M_SmartHome.LackOfDataException = LackOfDataException
    del LackOfDataException

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.Device._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_AlreadyTurnedOnException,))
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_AlreadyTurnedOffException,))

    _M_SmartHome.Device = Device
    del Device

if 'OvenStatus' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenStatus = Ice.createTempClass()
    class OvenStatus(object):
        def __init__(self, heat=0, humidity=0):
            self.heat = heat
            self.humidity = humidity

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.heat)
            _h = 5 * _h + Ice.getHash(self.humidity)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.OvenStatus):
                return NotImplemented
            else:
                if self.heat is None or other.heat is None:
                    if self.heat != other.heat:
                        return (-1 if self.heat is None else 1)
                else:
                    if self.heat < other.heat:
                        return -1
                    elif self.heat > other.heat:
                        return 1
                if self.humidity is None or other.humidity is None:
                    if self.humidity != other.humidity:
                        return (-1 if self.humidity is None else 1)
                else:
                    if self.humidity < other.humidity:
                        return -1
                    elif self.humidity > other.humidity:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_OvenStatus)

        __repr__ = __str__

    _M_SmartHome._t_OvenStatus = IcePy.defineStruct('::SmartHome::OvenStatus', OvenStatus, (), (
        ('heat', (), IcePy._t_int),
        ('humidity', (), IcePy._t_int)
    ))

    _M_SmartHome.OvenStatus = OvenStatus
    del OvenStatus

if '_t_Readings' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Readings = IcePy.defineSequence('::SmartHome::Readings', (), IcePy._t_float)

_M_SmartHome._t_Oven = IcePy.defineValue('::SmartHome::Oven', Ice.Value, -1, (), False, True, None, ())

if 'OvenPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenPrx = Ice.createTempClass()
    class OvenPrx(_M_SmartHome.DevicePrx):

        def heatUp(self, heat, context=None):
            return _M_SmartHome.Oven._op_heatUp.invoke(self, ((heat, ), context))

        def heatUpAsync(self, heat, context=None):
            return _M_SmartHome.Oven._op_heatUp.invokeAsync(self, ((heat, ), context))

        def begin_heatUp(self, heat, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_heatUp.begin(self, ((heat, ), _response, _ex, _sent, context))

        def end_heatUp(self, _r):
            return _M_SmartHome.Oven._op_heatUp.end(self, _r)

        def heatDown(self, heat, context=None):
            return _M_SmartHome.Oven._op_heatDown.invoke(self, ((heat, ), context))

        def heatDownAsync(self, heat, context=None):
            return _M_SmartHome.Oven._op_heatDown.invokeAsync(self, ((heat, ), context))

        def begin_heatDown(self, heat, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_heatDown.begin(self, ((heat, ), _response, _ex, _sent, context))

        def end_heatDown(self, _r):
            return _M_SmartHome.Oven._op_heatDown.end(self, _r)

        def humidityUp(self, humidity, context=None):
            return _M_SmartHome.Oven._op_humidityUp.invoke(self, ((humidity, ), context))

        def humidityUpAsync(self, humidity, context=None):
            return _M_SmartHome.Oven._op_humidityUp.invokeAsync(self, ((humidity, ), context))

        def begin_humidityUp(self, humidity, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_humidityUp.begin(self, ((humidity, ), _response, _ex, _sent, context))

        def end_humidityUp(self, _r):
            return _M_SmartHome.Oven._op_humidityUp.end(self, _r)

        def humidityDown(self, humidity, context=None):
            return _M_SmartHome.Oven._op_humidityDown.invoke(self, ((humidity, ), context))

        def humidityDownAsync(self, humidity, context=None):
            return _M_SmartHome.Oven._op_humidityDown.invokeAsync(self, ((humidity, ), context))

        def begin_humidityDown(self, humidity, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_humidityDown.begin(self, ((humidity, ), _response, _ex, _sent, context))

        def end_humidityDown(self, _r):
            return _M_SmartHome.Oven._op_humidityDown.end(self, _r)

        def getStatus(self, context=None):
            return _M_SmartHome.Oven._op_getStatus.invoke(self, ((), context))

        def getStatusAsync(self, context=None):
            return _M_SmartHome.Oven._op_getStatus.invokeAsync(self, ((), context))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_getStatus.begin(self, ((), _response, _ex, _sent, context))

        def end_getStatus(self, _r):
            return _M_SmartHome.Oven._op_getStatus.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.OvenPrx.ice_checkedCast(proxy, '::SmartHome::Oven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.OvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'
    _M_SmartHome._t_OvenPrx = IcePy.defineProxy('::SmartHome::Oven', OvenPrx)

    _M_SmartHome.OvenPrx = OvenPrx
    del OvenPrx

    _M_SmartHome.Oven = Ice.createTempClass()
    class Oven(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Oven')

        def ice_id(self, current=None):
            return '::SmartHome::Oven'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'

        def heatUp(self, heat, current=None):
            raise NotImplementedError("servant method 'heatUp' not implemented")

        def heatDown(self, heat, current=None):
            raise NotImplementedError("servant method 'heatDown' not implemented")

        def humidityUp(self, humidity, current=None):
            raise NotImplementedError("servant method 'humidityUp' not implemented")

        def humidityDown(self, humidity, current=None):
            raise NotImplementedError("servant method 'humidityDown' not implemented")

        def getStatus(self, current=None):
            raise NotImplementedError("servant method 'getStatus' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_OvenDisp)

        __repr__ = __str__

    _M_SmartHome._t_OvenDisp = IcePy.defineClass('::SmartHome::Oven', Oven, (), None, (_M_SmartHome._t_DeviceDisp,))
    Oven._ice_type = _M_SmartHome._t_OvenDisp

    Oven._op_heatUp = IcePy.Operation('heatUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceIsOffException,))
    Oven._op_heatDown = IcePy.Operation('heatDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceIsOffException,))
    Oven._op_humidityUp = IcePy.Operation('humidityUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceIsOffException,))
    Oven._op_humidityDown = IcePy.Operation('humidityDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceIsOffException,))
    Oven._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_OvenStatus, False, 0), (_M_SmartHome._t_DeviceIsOffException,))

    _M_SmartHome.Oven = Oven
    del Oven

_M_SmartHome._t_Detector = IcePy.defineValue('::SmartHome::Detector', Ice.Value, -1, (), False, True, None, ())

if 'DetectorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DetectorPrx = Ice.createTempClass()
    class DetectorPrx(_M_SmartHome.DevicePrx):

        def getReading(self, context=None):
            return _M_SmartHome.Detector._op_getReading.invoke(self, ((), context))

        def getReadingAsync(self, context=None):
            return _M_SmartHome.Detector._op_getReading.invokeAsync(self, ((), context))

        def begin_getReading(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Detector._op_getReading.begin(self, ((), _response, _ex, _sent, context))

        def end_getReading(self, _r):
            return _M_SmartHome.Detector._op_getReading.end(self, _r)

        def getAllReadings(self, context=None):
            return _M_SmartHome.Detector._op_getAllReadings.invoke(self, ((), context))

        def getAllReadingsAsync(self, context=None):
            return _M_SmartHome.Detector._op_getAllReadings.invokeAsync(self, ((), context))

        def begin_getAllReadings(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Detector._op_getAllReadings.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllReadings(self, _r):
            return _M_SmartHome.Detector._op_getAllReadings.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DetectorPrx.ice_checkedCast(proxy, '::SmartHome::Detector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Detector'
    _M_SmartHome._t_DetectorPrx = IcePy.defineProxy('::SmartHome::Detector', DetectorPrx)

    _M_SmartHome.DetectorPrx = DetectorPrx
    del DetectorPrx

    _M_SmartHome.Detector = Ice.createTempClass()
    class Detector(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Detector', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Detector'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Detector'

        def getReading(self, current=None):
            raise NotImplementedError("servant method 'getReading' not implemented")

        def getAllReadings(self, current=None):
            raise NotImplementedError("servant method 'getAllReadings' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DetectorDisp)

        __repr__ = __str__

    _M_SmartHome._t_DetectorDisp = IcePy.defineClass('::SmartHome::Detector', Detector, (), None, (_M_SmartHome._t_DeviceDisp,))
    Detector._ice_type = _M_SmartHome._t_DetectorDisp

    Detector._op_getReading = IcePy.Operation('getReading', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_LackOfDataException, _M_SmartHome._t_DeviceIsOffException))
    Detector._op_getAllReadings = IcePy.Operation('getAllReadings', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Readings, False, 0), (_M_SmartHome._t_LackOfDataException, _M_SmartHome._t_DeviceIsOffException))

    _M_SmartHome.Detector = Detector
    del Detector

_M_SmartHome._t_HeatDetector = IcePy.defineValue('::SmartHome::HeatDetector', Ice.Value, -1, (), False, True, None, ())

if 'HeatDetectorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.HeatDetectorPrx = Ice.createTempClass()
    class HeatDetectorPrx(_M_SmartHome.DetectorPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.HeatDetectorPrx.ice_checkedCast(proxy, '::SmartHome::HeatDetector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.HeatDetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HeatDetector'
    _M_SmartHome._t_HeatDetectorPrx = IcePy.defineProxy('::SmartHome::HeatDetector', HeatDetectorPrx)

    _M_SmartHome.HeatDetectorPrx = HeatDetectorPrx
    del HeatDetectorPrx

    _M_SmartHome.HeatDetector = Ice.createTempClass()
    class HeatDetector(_M_SmartHome.Detector):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Detector', '::SmartHome::Device', '::SmartHome::HeatDetector')

        def ice_id(self, current=None):
            return '::SmartHome::HeatDetector'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HeatDetector'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_HeatDetectorDisp)

        __repr__ = __str__

    _M_SmartHome._t_HeatDetectorDisp = IcePy.defineClass('::SmartHome::HeatDetector', HeatDetector, (), None, (_M_SmartHome._t_DetectorDisp,))
    HeatDetector._ice_type = _M_SmartHome._t_HeatDetectorDisp

    _M_SmartHome.HeatDetector = HeatDetector
    del HeatDetector

_M_SmartHome._t_HumidityDetector = IcePy.defineValue('::SmartHome::HumidityDetector', Ice.Value, -1, (), False, True, None, ())

if 'HumidityDetectorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.HumidityDetectorPrx = Ice.createTempClass()
    class HumidityDetectorPrx(_M_SmartHome.DetectorPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.HumidityDetectorPrx.ice_checkedCast(proxy, '::SmartHome::HumidityDetector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.HumidityDetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HumidityDetector'
    _M_SmartHome._t_HumidityDetectorPrx = IcePy.defineProxy('::SmartHome::HumidityDetector', HumidityDetectorPrx)

    _M_SmartHome.HumidityDetectorPrx = HumidityDetectorPrx
    del HumidityDetectorPrx

    _M_SmartHome.HumidityDetector = Ice.createTempClass()
    class HumidityDetector(_M_SmartHome.Detector):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Detector', '::SmartHome::Device', '::SmartHome::HumidityDetector')

        def ice_id(self, current=None):
            return '::SmartHome::HumidityDetector'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HumidityDetector'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_HumidityDetectorDisp)

        __repr__ = __str__

    _M_SmartHome._t_HumidityDetectorDisp = IcePy.defineClass('::SmartHome::HumidityDetector', HumidityDetector, (), None, (_M_SmartHome._t_DetectorDisp,))
    HumidityDetector._ice_type = _M_SmartHome._t_HumidityDetectorDisp

    _M_SmartHome.HumidityDetector = HumidityDetector
    del HumidityDetector

_M_SmartHome._t_LightDetector = IcePy.defineValue('::SmartHome::LightDetector', Ice.Value, -1, (), False, True, None, ())

if 'LightDetectorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightDetectorPrx = Ice.createTempClass()
    class LightDetectorPrx(_M_SmartHome.DetectorPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LightDetectorPrx.ice_checkedCast(proxy, '::SmartHome::LightDetector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LightDetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightDetector'
    _M_SmartHome._t_LightDetectorPrx = IcePy.defineProxy('::SmartHome::LightDetector', LightDetectorPrx)

    _M_SmartHome.LightDetectorPrx = LightDetectorPrx
    del LightDetectorPrx

    _M_SmartHome.LightDetector = Ice.createTempClass()
    class LightDetector(_M_SmartHome.Detector):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Detector', '::SmartHome::Device', '::SmartHome::LightDetector')

        def ice_id(self, current=None):
            return '::SmartHome::LightDetector'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightDetector'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightDetectorDisp)

        __repr__ = __str__

    _M_SmartHome._t_LightDetectorDisp = IcePy.defineClass('::SmartHome::LightDetector', LightDetector, (), None, (_M_SmartHome._t_DetectorDisp,))
    LightDetector._ice_type = _M_SmartHome._t_LightDetectorDisp

    _M_SmartHome.LightDetector = LightDetector
    del LightDetector

# End of module SmartHome
